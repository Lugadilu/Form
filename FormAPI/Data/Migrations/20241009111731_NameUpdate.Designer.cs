// <auto-generated />
using System;
using System.Collections.Generic;
using FormAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FormAPI.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241009111731_NameUpdate")]
    partial class NameUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FormAPI.Models.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("forms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("674192a3-6aeb-4a53-a084-61aeb87e3a6e"),
                            Description = "A form to collect customer feedback.",
                            Name = "JKUSA"
                        });
                });

            modelBuilder.Entity("FormAPI.Models.FormField", b =>
                {
                    b.Property<Guid>("InternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, object>>("Attributes")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<Dictionary<string, object>>("Rules")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("InternalId");

                    b.HasIndex("PageId");

                    b.ToTable("formfields");

                    b.HasData(
                        new
                        {
                            InternalId = new Guid("5a3f3b01-49ed-450b-b274-75cab3a40140"),
                            Attributes = new Dictionary<string, object> { ["maxLength"] = 100 },
                            FieldType = "profileId",
                            Id = "profileFirstName",
                            Kind = "profile",
                            Name = "profileFirstName",
                            PageId = new Guid("c6045c53-3ece-4973-97a6-34a9a589fe1c"),
                            Required = true,
                            Rules = new Dictionary<string, object> { ["minLength"] = 2, ["pattern"] = "^[a-zA-Z ]*$" }
                        });
                });

            modelBuilder.Entity("FormAPI.Models.FormRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Dictionary<string, object>>("FormFieldValues")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("formrecords");

                    b.HasData(
                        new
                        {
                            Id = new Guid("656c5cf1-a9aa-45e9-9d57-4714490ed56f"),
                            CreatedAt = new DateTime(2024, 10, 9, 11, 17, 30, 441, DateTimeKind.Utc).AddTicks(3882),
                            FormFieldValues = new Dictionary<string, object> { ["profileFirstName"] = "Nelly" },
                            FormId = new Guid("674192a3-6aeb-4a53-a084-61aeb87e3a6e")
                        });
                });

            modelBuilder.Entity("FormAPI.Models.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("pages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6045c53-3ece-4973-97a6-34a9a589fe1c"),
                            FormId = new Guid("674192a3-6aeb-4a53-a084-61aeb87e3a6e")
                        });
                });

            modelBuilder.Entity("FormAPI.Models.FormField", b =>
                {
                    b.HasOne("FormAPI.Models.Page", null)
                        .WithMany("FormFields")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FormAPI.Models.FormRecord", b =>
                {
                    b.HasOne("FormAPI.Models.Form", "Form")
                        .WithMany("FormRecords")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("FormAPI.Models.Page", b =>
                {
                    b.HasOne("FormAPI.Models.Form", "Form")
                        .WithMany("Pages")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("FormAPI.Models.Form", b =>
                {
                    b.Navigation("FormRecords");

                    b.Navigation("Pages");
                });

            modelBuilder.Entity("FormAPI.Models.Page", b =>
                {
                    b.Navigation("FormFields");
                });
#pragma warning restore 612, 618
        }
    }
}
