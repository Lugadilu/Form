// <auto-generated />
using System;
using System.Collections.Generic;
using FormAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FormAPI.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241010101656_SeedUpdate")]
    partial class SeedUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FormAPI.Models.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("forms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec0468f6-8a0c-46ea-94b8-3f547074c42c"),
                            Description = "A form to collect customer feedback.",
                            Name = "JKUSA"
                        });
                });

            modelBuilder.Entity("FormAPI.Models.FormField", b =>
                {
                    b.Property<Guid>("InternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, object>>("Attributes")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<Dictionary<string, object>>("Rules")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("InternalId");

                    b.HasIndex("PageId");

                    b.ToTable("formfields");

                    b.HasData(
                        new
                        {
                            InternalId = new Guid("93d20524-4b26-4de0-a509-2b104bcc4970"),
                            Attributes = new Dictionary<string, object>(),
                            FieldType = "FirstName",
                            Id = "profileFirstName",
                            Kind = "profile",
                            Name = "profileFirstName",
                            PageId = new Guid("dd2b6d09-5dfb-4b7b-8803-0f2248e0bd2d"),
                            Required = true,
                            Rules = new Dictionary<string, object>()
                        });
                });

            modelBuilder.Entity("FormAPI.Models.FormRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FormFieldValues")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("formrecords");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1cb4833d-41ee-4fe7-b077-6e1982c41202"),
                            CreatedAt = new DateTime(2024, 10, 10, 10, 16, 54, 82, DateTimeKind.Utc).AddTicks(9915),
                            FormFieldValues = "{\"profileFirstName\":\"Nelly\"}",
                            FormId = new Guid("ec0468f6-8a0c-46ea-94b8-3f547074c42c")
                        });
                });

            modelBuilder.Entity("FormAPI.Models.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("pages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd2b6d09-5dfb-4b7b-8803-0f2248e0bd2d"),
                            FormId = new Guid("ec0468f6-8a0c-46ea-94b8-3f547074c42c")
                        });
                });

            modelBuilder.Entity("FormAPI.Models.FormField", b =>
                {
                    b.HasOne("FormAPI.Models.Page", null)
                        .WithMany("FormFields")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FormAPI.Models.FormRecord", b =>
                {
                    b.HasOne("FormAPI.Models.Form", "Form")
                        .WithMany("FormRecords")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("FormAPI.Models.Page", b =>
                {
                    b.HasOne("FormAPI.Models.Form", "Form")
                        .WithMany("Pages")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("FormAPI.Models.Form", b =>
                {
                    b.Navigation("FormRecords");

                    b.Navigation("Pages");
                });

            modelBuilder.Entity("FormAPI.Models.Page", b =>
                {
                    b.Navigation("FormFields");
                });
#pragma warning restore 612, 618
        }
    }
}
