using FormAPI.DTOs;
using FormAPI.Models;
using Newtonsoft.Json;
using AutoMapper;

public class MappingProfile : Profile
{
    public MappingProfile()
    {
        // Map Form to FormDto, and Pages and FormRecords as well
        CreateMap<Form, FormDto>()
            //.ForMember(dest => dest.RowVersion, opt => opt.MapFrom(src => src.RowVersion))  // Map RowVersion
           // .ForMember(dest => dest.RowVersion, opt => opt.MapFrom(src => Convert.ToBase64String(src.RowVersion)))
            .ForMember(dest => dest.Pages, opt => opt.MapFrom(src => src.Pages))
             .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id));

        // Map Page to PageDto
        CreateMap<Page, PageDto>()
            .ForMember(dest => dest.Fields, opt => opt.MapFrom(src => src.FormFields));

        // Map FormField to FormFieldDto
        CreateMap<FormField, FormFieldDto>()
            .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id));  // Use HTML Id (string)


        // Map FormRecord to FormRecordDto, converting JSON string to dictionary
        CreateMap<FormRecord, FormRecordDto>();
            //.ForMember(dest => dest.FormFieldValues, opt => opt.MapFrom(src => JsonToDictionary(src.FormFieldValues)));
               
        // Reverse mappings for incoming DTOs
        CreateMap<FormDto, Form>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())  // ID is generated by the database
            .ForMember(dest => dest.Pages, opt => opt.MapFrom(src => src.Pages))
            .ForMember(dest => dest.FormRecords, opt => opt.Ignore()); // FormRecords ignored during form creation
           // .ForMember(dest => dest.RowVersion, opt => opt.Ignore()); // RowVersion handled by the database

        // Reverse mapping for PageDto to Page
        CreateMap<PageDto, Page>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())  // ID is generated by the database
            .ForMember(dest => dest.FormFields, opt => opt.MapFrom(src => src.Fields));

        // Reverse mapping for FormFieldDto to FormField
        CreateMap<FormFieldDto, FormField>()
            .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))  // Use HTML Id provided in the request (string)
            .ForMember(dest => dest.InternalId, opt => opt.Ignore());  // InternalId (database PK) managed by the database

        // Reverse mapping for FormRecordDto to FormRecord
        CreateMap<FormRecordDto, FormRecord>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())  // ID is generated by the database
            .ForMember(dest => dest.FormFieldValues, opt => opt.MapFrom(src => JsonConvert.SerializeObject(src.FormFieldValues)));
    }

    // Helper method to convert JSON string to Dictionary
    private Dictionary<string, object> JsonToDictionary(string json)
    {
        return string.IsNullOrEmpty(json)
            ? new Dictionary<string, object>()
            : JsonConvert.DeserializeObject<Dictionary<string, object>>(json);
    }
}





/*
using AutoMapper;
using FormAPI.DTOs;
using FormAPI.Models;
using Newtonsoft.Json;

public class MappingProfile : Profile
{
    public MappingProfile()
    {
        // Map Form to FormDto, and Pages and FormRecords as well
        CreateMap<Form, FormDto>()
            //.ForMember(dest => dest.FormRecords, opt => opt.MapFrom(src => src.FormRecords))
            .ForMember(dest => dest.Pages, opt => opt.MapFrom(src => src.Pages));
           // .ForMember(dest => dest.Type, opt => opt.MapFrom(src => "form"))
           // .ForMember(dest => dest.RowVersion, opt => opt.MapFrom(src => Convert.ToBase64String(src.RowVersion)));

        // Map Page to PageDto
        CreateMap<Page, PageDto>()
            .ForMember(dest => dest.Fields, opt => opt.MapFrom(src => src.FormFields));

        // Map FormField to FormFieldDto
        CreateMap<FormField, FormFieldDto>();

        // Map FormRecord to FormRecordDto, converting JSON string to dictionary
        CreateMap<FormRecord, FormRecordDto>()
            .ForMember(dest => dest.FormFieldValues, opt => opt.MapFrom(src => JsonToDictionary(src.FormFieldValues)));

        // Reverse mappings for incoming DTOs
        CreateMap<FormDto, Form>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())  // ID is generated by the database
            .ForMember(dest => dest.Pages, opt => opt.MapFrom(src => src.Pages))
             .ForMember(dest => dest.FormRecords, opt => opt.Ignore()) // Skip FormRecords during creation
                                                                       // .ForMember(dest => dest.FormRecords, opt => opt.MapFrom(src => src.FormRecords))
            .ForMember(dest => dest.RowVersion, opt => opt.Ignore()); // RowVersion is managed by the database

        CreateMap<PageDto, Page>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())  // ID is generated by the database
            .ForMember(dest => dest.FormFields, opt => opt.MapFrom(src => src.Fields));

        CreateMap<FormFieldDto, FormField>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())  // ID is generated by the database
            .ForMember(dest => dest.InternalId, opt => opt.Ignore());  // InternalId is managed by the database

        CreateMap<FormRecordDto, FormRecord>()
            .ForMember(dest => dest.Id, opt => opt.Ignore())  // ID is generated by the database
            .ForMember(dest => dest.FormFieldValues, opt => opt.MapFrom(src => JsonConvert.SerializeObject(src.FormFieldValues)));
    }

    // Helper method to convert JSON string to Dictionary
    private Dictionary<string, object> JsonToDictionary(string json)
    {
        return string.IsNullOrEmpty(json)
            ? new Dictionary<string, object>()
            : JsonConvert.DeserializeObject<Dictionary<string, object>>(json);
    }
}
*/


