using FormAPI.Models;
using Microsoft.EntityFrameworkCore;
using System;
using FormAPI.Data;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;



namespace FormAPI.Context
{
    public class ApplicationDbContext : DbContext
    {
        // Added to address the timestamp issue
        static ApplicationDbContext()
        {
            AppContext.SetSwitch("Npgsql.EnableLegacyTimestampBehavior", true);
        }

        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }

        public DbSet<FormField> formfields { get; set; }
        public DbSet<FormRecord> formrecords { get; set; }
        public DbSet<Form> forms { get; set; }
        public DbSet<Page> pages { get; set; }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            /*
            // Configure the FormField entity to use a value converter for the Attributes and Rules properties
            var dictionaryConverter = new ValueConverter<Dictionary<string, object>, string>(
                v => JsonConvert.SerializeObject(v), // Convert dictionary to JSON string for storage
                v => JsonConvert.DeserializeObject<Dictionary<string, object>>(v) // Convert JSON string back to dictionary
            );
            */
            // Configure FormField entity mappings
            modelBuilder.Entity<FormField>()
                .Property(f => f.Attributes)
               // .HasConversion(dictionaryConverter)  // Apply the value converter for Attributes
                .HasColumnType("jsonb");  // Store as JSONB in PostgreSQL

            modelBuilder.Entity<FormField>()
                .Property(f => f.Rules)
               // .HasConversion(dictionaryConverter)  // Apply the value converter for Rules
                .HasColumnType("jsonb");  // Store as JSONB in PostgreSQL

            // Configure the Form entity relationships
            modelBuilder.Entity<Form>()
                .HasMany(f => f.Pages)
                .WithOne(p => p.Form)
                .HasForeignKey(p => p.FormId)
                .OnDelete(DeleteBehavior.Cascade);

            // Modified: Configure the FormRecord entity relationships
            modelBuilder.Entity<FormRecord>()
                .HasOne(fr => fr.Form)    // Establish one-to-many relationship with Form
                .WithMany(f => f.FormRecords)
                .HasForeignKey(fr => fr.FormId)  // Define the foreign key property in FormRecord
                .OnDelete(DeleteBehavior.Cascade);  // Ensure cascading delete behavior
            /*
            modelBuilder.Entity<Form>()
                .HasMany(f => f.FormRecords)
                .WithOne(fr => fr.Form)
                .HasForeignKey(fr => fr.FormId);
            */
            // Configure the Page entity relationships
            modelBuilder.Entity<Page>()
                .HasMany(p => p.FormFields)
                .WithOne(ff => ff.Page)
                .HasForeignKey(ff => ff.PageId)
                .OnDelete(DeleteBehavior.Cascade);

            // Mark RowVersion as a concurrency token
            modelBuilder.Entity<Form>();
               // .Property(f => f.RowVersion)
                //.IsRowVersion();  // Mark as concurrency token for optimistic concurrency control

            modelBuilder.Entity<Form>()
                .Property(f => f.Id)
                .HasColumnType("uuid")  // Specify the UUID column type for PostgreSQL
                .ValueGeneratedOnAdd(); // Indicate that the UUID is generated by the database on insert


            // Optional: Ignore navigation-like properties if necessary
            modelBuilder.Entity<FormField>().Ignore(f => f.Page);


            // Seed the database with initial data
           // SeedData.Initialize(modelBuilder);
        }
        
    }
}












